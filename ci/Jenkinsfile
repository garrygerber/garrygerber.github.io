pipeline {
    agent any
    
    environment {
        // GitHub repository information
        GITHUB_REPO = 'garrygerber/simple-web'
        // Kubernetes namespace for deployment
        NAMESPACE = 'garry'
        // GitHub credentials ID
        GITHUB_CRED_ID = 'GITHUB_CRED_ID'
        // AKS cluster name
        AKS_CLUSTER_NAME = 'devops-interview-aks'
        // Azure resource group
        RESOURCE_GROUP = 'devops-interview-rg'
        // Helm repository name
        HELM_REPO_NAME = 'simple-web'
        // Helm repository URL
        HELM_REPO_URL = 'https://garrygerber.github.io/simple-web'
        // Kubeconfig file path
        KUBECONFIG = './kubeconfig'
    }
    
    parameters {
        // User input for action to perform
        choice(name: 'ACTION', choices: ['Deploy', 'Destroy'], description: 'Select whether to deploy or destroy a Helm release')
    }
    
    stages {
        stage('Setup') {
            steps {
                script {
                    // Set build display name
                    currentBuild.displayName = "${params.ACTION}"
                    // Login to Azure, get AKS credentials, and convert kubeconfig for Azure AD authentication
                    sh """
                        az login -i
                        az aks get-credentials --resource-group ${RESOURCE_GROUP} --name ${AKS_CLUSTER_NAME} --file ${KUBECONFIG}
                        kubelogin convert-kubeconfig -l msi
                    """
                    
                    // Check if Helm repo exists, add if it doesn't
                    sh "helm repo remove ${HELM_REPO_NAME}" 
                    def repoExists = sh(script: "helm repo list | grep -q ${HELM_REPO_NAME}", returnStatus: true)
                    if (repoExists != 0) {
                        echo "Helm Repo is Missing, Adding repository ${HELM_REPO_NAME}"
                        sh "helm repo add ${HELM_REPO_NAME} ${HELM_REPO_URL}"
                    }
                    // Update Helm repos
                    sh "helm repo update"
                }
            }
        }

        stage('Select Chart') {
            when {
                expression { params.ACTION == 'Deploy' }
            }
            steps {
                script {
                    // Get list of available charts
                    def chartNames = sh(script: """
                        helm search repo ${HELM_REPO_NAME}/ | grep ${HELM_REPO_NAME}/ | awk '{print \$1}' | sed 's|${HELM_REPO_NAME}/||g' | sort -u
                    """, returnStdout: true).trim()
                    
                    if (chartNames) {
                        def chartList = chartNames.split('\n').toList()
                        // User input to select chart
                        def selection = input(
                            message: "Select the chart to ${params.ACTION}:",
                            parameters: [choice(name: 'CHART', choices: chartList, description: 'Available charts')]
                        )
                        env.SELECTED_CHART = selection
                        currentBuild.displayName = "${params.ACTION} | ${env.SELECTED_CHART}"
                    } else {
                        error "No charts found in the charts directory."
                    }
                }
            }
        }
        
        stage('Select Release') {
            when {
                expression { params.ACTION == 'Deploy' }
            }
            steps {
                script {
                    // Get list of available versions for the selected chart
                    def versions = sh(script: """
                        helm search repo ${HELM_REPO_NAME}/${env.SELECTED_CHART} --versions | grep ${HELM_REPO_NAME}/${env.SELECTED_CHART} | awk '{print \$2}' | sort -rV
                    """, returnStdout: true).trim()
                    
                    if (versions) {
                        def versionList = versions.split('\n').toList()
                        // User input to select version
                        def selection = input(
                            message: 'Select the version to deploy:',
                            parameters: [choice(name: 'VERSION', choices: versionList, description: 'Available versions')]
                        )
                        env.RELEASE_TAG = selection
                        currentBuild.displayName = "${params.ACTION} | ${env.SELECTED_CHART}-${env.RELEASE_TAG}"
                    } else {
                        error "No versions found for ${env.SELECTED_CHART}."
                    }
                }
            }
        }

        stage('Custom Values') {
            when {
                expression { params.ACTION == 'Deploy' }
            }
            steps {
                script {
                    // User input for custom values
                    def customValues = input(
                        message: 'Enter custom values for the Helm chart (optional)',
                        parameters: [
                            string(name: 'CUSTOM_VALUES', 
                                    description: '''Enter custom values in key=value format, separated by commas. Keys can be quoted if they contain special characters. Leave empty for default values.\nExample:\nreplicaCount=2, image.tag=v1.0.0, ingress.enabled=true, resources.limits.cpu=100m, resources.limits.memory=128Mi, "my.special.key"="special value"''', 
                                    defaultValue: '')
                        ]
                    )
                    
                    // Process custom values
                    if (customValues.trim()) {
                        env.CUSTOM_VALUES = customValues.split(',').collect { "--set ${it.trim()}" }.join(' ')
                    } else {
                        env.CUSTOM_VALUES = ''
                    }
                }
            }
        }

        stage('Deploy Helm Chart') {
            when {
                expression { params.ACTION == 'Deploy' }
            }
            steps {
                script {
                    // Helm upgrade/install command
                    def deployCommand = """
                        helm upgrade --install ${env.SELECTED_CHART}-${env.RELEASE_TAG} ${HELM_REPO_NAME}/${env.SELECTED_CHART} \
                        --namespace ${NAMESPACE} \
                        --version ${env.RELEASE_TAG} \
                        --wait \
                        --timeout 5m \
                        --kubeconfig ${KUBECONFIG} \
                        ${env.CUSTOM_VALUES}
                        helm test ${env.SELECTED_CHART}-${env.RELEASE_TAG} --namespace ${NAMESPACE}
                    """
                    
                    // Execute Helm deployment
                    sh deployCommand
                    
                    // Wait for pods to be ready
                    timeout(time: 2, unit: 'MINUTES') {
                        sh "kubectl wait --for=condition=Ready pods -l app.kubernetes.io/instance=${env.SELECTED_CHART}-${env.RELEASE_TAG} -n ${NAMESPACE} --timeout=120s"
                    }
                }
            }
        }
        
        stage('Destroy Helm Release') {
            when {
                expression { params.ACTION == 'Destroy' }
            }
            steps {
                script {
                    try {
                        // Get list of existing Helm releases
                        def existingReleases = sh(
                            script: "helm list -n ${NAMESPACE} --kubeconfig ${KUBECONFIG} -o json",
                            returnStdout: true
                        ).trim()
                        
                        def releases = readJSON text: existingReleases
                        
                        if (releases.size() > 0) {
                            def releaseOptions = releases.collect { 
                                "${it.name} (Chart: ${it.chart}, Version: ${it.app_version})"
                            }
                            
                            // User input to select release to destroy
                            def selection = input(
                                message: 'Select the release to destroy:',
                                parameters: [
                                    choice(
                                        name: 'RELEASE', 
                                        choices: releaseOptions, 
                                        description: 'Existing releases (Name - Chart - Version)'
                                    )
                                ]
                            )
                            
                            env.RELEASE_NAME = selection.split(' ')[0]
                            def releaseInfo = releases.find { it.name == env.RELEASE_NAME }
                            currentBuild.displayName = "Destroy | ${releaseInfo.name} | ${releaseInfo.chart}-v${releaseInfo.app_version}"
                            // Confirmation step
                            input(
                                message: "Are you sure you want to destroy release '${env.RELEASE_NAME}'?",
                                ok: "Yes, destroy it"
                            )
                            
                            echo "Destroying Helm release: ${env.RELEASE_NAME}"
                            
                            // Helm uninstall command
                            def destroyCommand = """
                                    helm uninstall ${env.RELEASE_NAME} \
                                    --namespace ${NAMESPACE} \
                                    --wait \
                                    --timeout 5m \
                                    --kubeconfig ${KUBECONFIG}
                                """
                            sh destroyCommand
                                                        
                            // Check for leftover resources
                            def leftoverResources = sh(
                                script: """
                                    kubectl get deploy,service,pod,ingress,scaledobject -n ${NAMESPACE} -l app.kubernetes.io/instance=${env.RELEASE_NAME} -o name
                                """,
                                returnStdout: true
                            ).trim()
                            
                            // Force delete leftover resources if any
                            if (leftoverResources) {
                                echo "Warning: Some resources were not properly removed:"
                                echo leftoverResources
                                input(
                                    message: "Do you want to force delete these resources?",
                                    ok: "Yes, force delete"
                                )
                                sh """
                                    kubectl delete deploy,service,pod,ingress,scaledobject -n ${NAMESPACE} -l app.kubernetes.io/instance=${env.RELEASE_NAME} --force --grace-period=0
                                """
                            }
                            
                            echo "Release '${env.RELEASE_NAME}' has been successfully destroyed."
                        } else {
                            echo "No existing releases found in namespace ${NAMESPACE}"
                        }
                    } catch (Exception e) {
                        error "Failed to destroy release: ${e.getMessage()}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Clean up kubeconfig file
            sh 'rm -f ${KUBECONFIG}'
        }
        success {
            echo "${params.ACTION} of ${params.ACTION == 'Deploy' ? env.SELECTED_CHART : env.RELEASE_NAME} ${params.ACTION == 'Deploy' ? "version ${env.RELEASE_TAG}" : ''} successful!"
        }
        failure {
            echo "${params.ACTION} failed. Please check the logs for more information."
        }
    }
}